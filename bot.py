from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler, ConversationHandler
)
import logging
import datetime
import gspread
from google.oauth2.service_account import Credentials

TOKEN = "YOUR_TOKEN_HERE"
ADMIN_ID = 407721399

logging.basicConfig(level=logging.INFO)

(ASK_NAME, ASK_PROJECT, ASK_BUDGET) = range(3)

# Google Sheets Setup
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_file("zhbankod_gsheets_credentials.json", scopes=SCOPES)
gs_client = gspread.authorize(creds)
sheet = gs_client.open("–ñ–ë–ê–ù–ö–û–î –ó–∞—è–≤–∫–∏").sheet1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üß† –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üìÇ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç", callback_data="portfolio")],
        [InlineKeyboardButton("üì¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="form")],
        [InlineKeyboardButton("üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="order")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/zhbankov_alex")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ñ–ë–ê–ù–ö–û–î ‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–æ–≤ –ø–æ–¥ –∫–ª—é—á!", reply_markup=reply_markup)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    if data == "services":
        await query.edit_message_text(
            "üß† *–£—Å–ª—É–≥–∏ –ñ–ë–ê–ù–ö–û–î:*

"
            "‚Ä¢ –ê–Ω–∫–µ—Ç–Ω—ã–µ –±–æ—Ç—ã —Å Google Sheets
"
            "‚Ä¢ –ë–æ—Ç—ã —Å –æ–ø–ª–∞—Ç–æ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
"
            "‚Ä¢ –í–æ—Ä–æ–Ω–∫–∏ + –ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª
",
            parse_mode="Markdown"
        )
    elif data == "portfolio":
        await query.edit_message_text(
            "üìÇ *–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:*

"
            "‚Ä¢ @Parser_newbot ‚Äî –±–æ—Ç –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
"
            "‚Ä¢ @Capitalpay_newbot ‚Äî HighRisk –∞–Ω–∫–µ—Ç–∞ —Å –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–æ–π
",
            parse_mode="Markdown"
        )
    elif data == "form":
        await query.edit_message_text("üì¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ Telegram (–∏–ª–∏ –Ω–∏–∫):")
        return ASK_NAME
    elif data == "order":
        await query.edit_message_text("üí∞ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'.")
    else:
        await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üìù –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –±–æ—Ç –≤–∞–º –Ω—É–∂–µ–Ω:")
    return ASK_PROJECT

async def ask_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["project"] = update.message.text
    await update.message.reply_text("üí∏ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç:")
    return ASK_BUDGET

async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    user = update.message.from_user
    data = context.user_data

    date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
    tg_link = f"@{user.username}" if user.username else f"https://t.me/user?id={user.id}"

    # –ó–∞–ø–∏—Å—å –≤ Google Sheets
    sheet.append_row([
        data['name'],
        data['project'],
        data['budget'],
        tg_link,
        date
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    text = (
        f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*

"
        f"üë§ –ò–º—è: {data['name']}
"
        f"üß† –ü—Ä–æ–µ–∫—Ç: {data['project']}
"
        f"üí∏ –ë—é–¥–∂–µ—Ç: {data['budget']}
"
        f"üîó Telegram: {tg_link}
"
        f"üìÖ –î–∞—Ç–∞: {date}"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode="Markdown")
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Telegram.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(callback_handler, pattern="^form$")],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_PROJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_project)],
            ASK_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_budget)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
