import os
import json
import logging
import datetime
import gspread
import asyncio
from openai import OpenAI

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler
)
from google.oauth2.service_account import Credentials

main_menu_keyboard = ReplyKeyboardMarkup([
    ["üß† –£—Å–ª—É–≥–∏", "üìÇ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç"],
    ["üì¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å"],
    ["ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"],
    ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]
], resize_keyboard=True)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables")

creds_json = os.environ.get("GCP_CREDENTIALS_JSON")
if not creds_json:
    raise ValueError("GCP_CREDENTIALS_JSON is not set in environment variables")

ADMIN_ID = 407721399
CHANNEL_ID = -1002616572459
BOT_USERNAME = "@zhbankod_bot"

logging.basicConfig(level=logging.INFO)

(ASK_NAME, ASK_PROJECT, ASK_BUDGET) = range(3)

SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
creds_dict = json.loads(creds_json)
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gs_client = gspread.authorize(creds)
sheet = gs_client.open("–ñ–ë–ê–ù–ö–û–î –ó–∞—è–≤–∫–∏").worksheet("–õ–∏—Å—Ç1")

async def set_menu(bot):
    commands = [
        BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º –º–∞–≥–∏—é"),
        BotCommand("menu", "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "‚ùì –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
    ]
    if ADMIN_ID:
        commands.append(BotCommand("publish", "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª (–¥–ª—è –∞–¥–º–∏–Ω–∞)"))
    await bot.set_my_commands(commands)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã ‚Äî <b>–ñ–ë–ê–ù–ö–û–î</b>, —Å–æ–∑–¥–∞—ë–º Telegram-–±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–æ—Å—è—Ç –∑–∞—è–≤–∫–∏, –¥–µ–Ω—å–≥–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é—Ç –≤–∞—à –±–∏–∑–Ω–µ—Å.\n\n"
        "‚öôÔ∏è –•–æ—Ç–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, CRM, –ø—Ä–∏—ë–º –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏?\n"
        "üëá –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚Äî –∏ –º—ã –ø–æ–∫–∞–∂–µ–º, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:"
    )
    with open("THIS_IS_ZHBANKOD.jpg", "rb") as photo:
        if update.message:
            await update.message.reply_photo(photo=photo, caption=message_text, reply_markup=main_menu_keyboard, parse_mode="HTML")
        elif update.callback_query:
            await update.callback_query.message.reply_photo(photo=photo, caption=message_text, reply_markup=main_menu_keyboard, parse_mode="HTML")
    return ConversationHandler.END

async def services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üß† <b>–ß—Ç–æ –º—ã —Å–¥–µ–ª–∞–µ–º –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:</b>\n\n"
        "‚úÖ –ê–≤—Ç–æ—Ñ–æ—Ä–º—ã ‚Äî –∑–∞—è–≤–∫–∏ —Å—Ä–∞–∑—É –≤ Google Sheets –±–µ–∑ –ø–æ—Ç–µ—Ä—å\n"
        "‚úÖ –ü—Ä–∏—ë–º –æ–ø–ª–∞—Ç—ã –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ (–±–µ–∑ —Å–∞–π—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞)\n"
        "‚úÖ –í–æ—Ä–æ–Ω–∫–∏, –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ\n"
        "‚úÖ AI, –ª–æ–≥–∏—Å—Ç–∏–∫–∞, —Ç–µ–Ω–¥–µ—Ä—ã ‚Äî –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–¥ –∫–ª—é—á\n"
        "‚úÖ GPT-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ‚Äî –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –≤–∞—Å 24/7\n\n"
        "‚öôÔ∏è –í—Å—ë –ø–æ–¥ –∫–ª—é—á. –ë–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤. –¢–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
        parse_mode="HTML",
        reply_markup=main_menu_keyboard
    )

async def portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìÇ <b>–ù–∞—à–∏ –∫–µ–π—Å—ã:</b>\n\n"
        "‚Ä¢ @Parser_newbot ‚Äî –±–æ—Ç –¥–ª—è –ª–æ–≥–∏—Å—Ç–æ–≤\n"
        "‚Ä¢ @Capitalpay_newbot ‚Äî –∞–Ω–∫–µ—Ç–∞ –¥–ª—è HighRisk –∫–æ–º–∞–Ω–¥\n"
        "‚Ä¢ @bez_otkaza_bot ‚Äî –±–æ—Ç –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –±—Ä–æ–∫–µ—Ä–æ–≤ —Å GPT –∏ —Ç–∞–±–ª–∏—Ü–µ–π\n\n"
        "–ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏. –ú—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è.",
        parse_mode="HTML",
        reply_markup=main_menu_keyboard
    )

async def form_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form_step"] = "ask_name"
    await update.message.reply_text(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel")]
        ])
    )

async def form_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    step = context.user_data.get("form_step")

    # üìç –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
    if "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É" in text and not step:
        return await form_entry(update, context)

    if step == "ask_name":
        context.user_data["name"] = update.message.text
        context.user_data["form_step"] = "ask_project"
        await update.message.reply_text(
            "‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, *–∫–∞–∫–æ–π –±–æ—Ç –≤–∞–º –Ω—É–∂–µ–Ω*:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel")]
            ])
        )
        return

    if step == "ask_project":
        context.user_data["project"] = update.message.text
        context.user_data["form_step"] = "ask_budget"
        await update.message.reply_text(
            "üí∏ –£–∫–∞–∂–∏—Ç–µ *–∂–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç* –ø—Ä–æ–µ–∫—Ç–∞:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel")]
            ])
        )
        return

    if step == "ask_budget":
        context.user_data["budget"] = update.message.text
        context.user_data["form_step"] = None

        user = update.message.from_user
        data = context.user_data
        date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
        tg_link = f"@{user.username}" if user.username else f"https://t.me/user?id={user.id}"

        try:
            sheet.append_row([
                data['name'],
                data['project'],
                data['budget'],
                tg_link,
                date
            ])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard)
            return

        text = (
            f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üß† –ü—Ä–æ–µ–∫—Ç: {data['project']}\n"
            f"üí∏ –ë—é–¥–∂–µ—Ç: {data['budget']}\n"
            f"üîó Telegram: {tg_link}\n"
            f"üóìÔ∏è –î–∞—Ç–∞: {date}"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode="Markdown")
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Telegram.", reply_markup=main_menu_keyboard)
        return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –≤ GPT
    return await gpt_reply(update, context)

async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üöß –†–∞–∑–¥–µ–ª '–ó–∞–∫–∞–∑–∞—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å' —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=main_menu_keyboard)

async def ask_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à GPT-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ø—Ä—è–º–æ –∑–¥–µ—Å—å:",
        reply_markup=main_menu_keyboard
    )
    context.user_data["awaiting_gpt"] = True

async def gpt_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_gpt"):
        return

    question = update.message.text

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é Telegram-–±–æ—Ç–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. "
                        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á–∞—Ç-–±–æ—Ç–∞–º–∏ –≤ Telegram: "
                        "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –≤–æ—Ä–æ–Ω–∫–∏, CRM, –ø—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –∏ –æ–ø–ª–∞—Ç, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ç.–ø.\n\n"
                        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ Telegram-–±–æ—Ç–æ–≤, –º—è–≥–∫–æ —É—Ç–æ—á–Ω–∏ –∏ –Ω–∞–ø—Ä–∞–≤—å –∫–ª–∏–µ–Ω—Ç–∞ –∫ –∫–Ω–æ–ø–∫–µ ¬´–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º¬ª."
                    )
                },
                {"role": "user", "content": question}
            ],
            temperature=0.7,
            max_tokens=600
        )

        answer = response.choices[0].message.content.strip()
        await update.message.reply_text(answer, reply_markup=main_menu_keyboard)
        await update.message.reply_text("‚úçÔ∏è –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
        context.user_data["awaiting_gpt"] = False

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard)
        logging.error(f"GPT Error: {e}")
        context.user_data["awaiting_gpt"] = False

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text(
        "‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, *–∫–∞–∫–æ–π –±–æ—Ç –≤–∞–º –Ω—É–∂–µ–Ω*:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel")]
        ])
    )
    return ASK_PROJECT

async def ask_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["project"] = update.message.text
    await update.message.reply_text(
        "üí∏ –£–∫–∞–∂–∏—Ç–µ *–∂–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç* –ø—Ä–æ–µ–∫—Ç–∞:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel")]
        ])
    )
    return ASK_BUDGET

async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    user = update.message.from_user
    data = context.user_data
    date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
    tg_link = f"@{user.username}" if user.username else f"https://t.me/user?id={user.id}"

    try:
        sheet.append_row([
            data['name'],
            data['project'],
            data['budget'],
            tg_link,
            date
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard)
        return ConversationHandler.END

    text = (
        f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üß† –ü—Ä–æ–µ–∫—Ç: {data['project']}\n"
        f"üí∏ –ë—é–¥–∂–µ—Ç: {data['budget']}\n"
        f"üîó Telegram: {tg_link}\n"
        f"üóìÔ∏è –î–∞—Ç–∞: {date}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode="Markdown")
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Telegram.", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

async def contact_manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë®‚Äçüíº –ù–∞–ø–∏—à–∏—Ç–µ @zhbankov_alex ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.", reply_markup=main_menu_keyboard)

async def publish_welcome_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_menu_keyboard)
        return

    text = (
        "<b>üìå üíî –¢—ã –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –∫ –±—ã–≤—à–µ–π. –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∏ –∫ —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ.</b>\n"
        "<b>–ñ–ë–ê–ù–ö–û–î</b> ‚Äî —Å–æ–∑–¥–∞—ë–º Telegram-–±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –≤—Å—ë –∑–∞ —Ç–µ–±—è.\n\n"
        "ü§ñ –ó–∞—è–≤–∫–∏, –æ–ø–ª–∞—Ç—ã, –≤–æ—Ä–æ–Ω–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–∞–∂–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ ‚Äî –±–æ—Ç –±–µ—Ä—ë—Ç –Ω–∞ —Å–µ–±—è —Ä—É—Ç–∏–Ω—É, –ø–æ–∫–∞ —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –±–∏–∑–Ω–µ—Å–æ–º.\n\n"
        "‚úÖ –ó–∞—è–≤–∫–∏ ‚Äî —Å—Ä–∞–∑—É –≤ —Ç–∞–±–ª–∏—Ü—É\n"
        "‚úÖ –û–ø–ª–∞—Ç—ã ‚Äî –ø—Ä—è–º–æ –≤ Telegram, –±–µ–∑ —Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤\n"
        "‚úÖ –í–æ—Ä–æ–Ω–∫–∏, –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã, –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ‚Äî –≤—Å—ë –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ\n"
        "‚úÖ –û–Ω–ª–∞–π–Ω-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–∞ –±–∞–∑–µ ChatGPT ‚Äî –æ—Ç–≤–µ—á–∞—é—Ç, –æ–±—É—á–∞—é—Ç—Å—è, –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Ä—É—Ç–∏–Ω—É\n"
        "‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤, –∫–æ–º–∞–Ω–¥, –ª–æ–≥–∏—Å—Ç–æ–≤, –í–≠–î, —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ\n\n"
        "üìÇ <b>–î–∞—ë–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</b> ‚Äî –º–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å –≤ —Ä–∞—Å—Ö–æ–¥—ã\n\n"
        "üìö –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ ‚Äî –∫–µ–π—Å—ã, —à–∞–±–ª–æ–Ω—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
        "üìù <b>–•–æ—á–µ—à—å —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å?</b>\n"
        "üìé <a href='https://docs.google.com/spreadsheets/d/1eI1SkiA37tWKz9S5HCBl1XV8flODGOBL/edit?usp=sharing'>–°–∫–∞—á–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –±—Ä–∏—Ñ (2‚Äì3 –º–∏–Ω—É—Ç—ã)</a>\n\n"
        f"üëá –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É:\n{BOT_USERNAME}\n\n"
        "üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å? –ü–∏—à–∏ –≤ –Ω–∞—à —á–∞—Ç:\n"
        "<a href='https://t.me/+bAejsng5mFRmMWZi'>–ñ–ë–ê–ù–ö–û–î | –û–±—Å—É–∂–¥–µ–Ω–∏–µ</a>\n\n"
        "#–∂–±–∞–Ω–∫–æ–¥ #–±–æ—Ç–¥–ª—è–±–∏–∑–Ω–µ—Å–∞ #–ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è #–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è #—á–∞—Ç–±–æ—Ç #–±–æ—Ç–¥–ª—è–ª–æ–≥–∏—Å—Ç–∏–∫–∏"
    )

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", url=f"https://t.me/{BOT_USERNAME.replace('@', '')}")]
    ])
    with open("THIS_IS_ZHBANKOD.jpg", "rb") as photo:
        message = await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=photo,
            caption=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        await context.bot.pin_chat_message(chat_id=CHANNEL_ID, message_id=message.message_id)
        await update.message.reply_text("‚úÖ –ü–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω.", reply_markup=main_menu_keyboard)

# –û—Å—Ç–∞–ª–∞—Å—å –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main()

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()
    if data == "cancel":
        await start(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùì <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ñ–ë–ê–ù–ö–û–î:</b>\n\n"
        "üöÄ –ù–∞–∂–º–∏—Ç–µ <code>/start</code> –∏–ª–∏ <code>/menu</code>, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
        "üì¨ –í —Ä–∞–∑–¥–µ–ª–µ <b>¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª</b> –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º –∑–∞–ø—Ä–æ—Å:\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ Telegram\n"
        "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –±–æ—Ç–∞\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç\n\n"
        "üìû –ò–ª–∏ —Å—Ä–∞–∑—É –ø–∏—à–∏—Ç–µ <a href='https://t.me/zhbankov_alex'>@zhbankov_alex</a>",
        parse_mode="HTML",
        reply_markup=main_menu_keyboard
    )
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(set_menu(app.bot))

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("publish", publish_welcome_post))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    app.add_handler(CallbackQueryHandler(callback_handler, pattern="^cancel$"))

    # Reply-–∫–Ω–æ–ø–∫–∏
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üß† –£—Å–ª—É–≥–∏$"), services))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìÇ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç$"), portfolio))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å$"), order))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º$"), contact_manager))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É$"), ask_gpt))

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –ø–æ –∞–Ω–∫–µ—Ç–µ –∏ GPT
    app.add_handler(MessageHandler(filters.TEXT, form_router))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    app.run_polling()


if __name__ == "__main__":
    main()

