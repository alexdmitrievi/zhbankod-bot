import os
import json
import logging
import datetime
import gspread
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, CallbackQueryHandler, ConversationHandler
)
from google.oauth2.service_account import Credentials

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables")

creds_json = os.environ.get("GCP_CREDENTIALS_JSON")
if not creds_json:
    raise ValueError("GCP_CREDENTIALS_JSON is not set in environment variables")

ADMIN_ID = 407721399

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
(ASK_NAME, ASK_PROJECT, ASK_BUDGET) = range(3)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
creds_dict = json.loads(creds_json)
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gs_client = gspread.authorize(creds)
sheet = gs_client.open("–ñ–ë–ê–ù–ö–û–î –ó–∞—è–≤–∫–∏").worksheet("–õ–∏—Å—Ç1")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
async def set_menu(bot):
    await bot.set_my_commands([
        BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º –º–∞–≥–∏—é"),
        BotCommand("menu", "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "‚ùì –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üß† –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üìÇ –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç", callback_data="portfolio")],
        [InlineKeyboardButton("üì¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="form")],
        [InlineKeyboardButton("üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="order")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/zhbankov_alex")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ñ–ë–ê–ù–ö–û–î ‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–æ–≤ –ø–æ–¥ –∫–ª—é—á!",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    if data == "services":
        await query.edit_message_text(
            "üß† *–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º –≤ –ñ–ë–ê–ù–ö–û–î:*\n\n"
            "‚Ä¢ –ë–æ—Ç—ã-–∞–Ω–∫–µ—Ç—ã —Å Google Sheets ‚Äî –∑–∞—è–≤–∫–∏ –ø—Ä—è–º–æ –≤ —Ç–∞–±–ª–∏—Ü—É\n"
            "‚Ä¢ –ë–æ—Ç—ã —Å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–æ–π, CRM –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π\n"
            "‚Ä¢ –í–æ—Ä–æ–Ω–∫–∏ + –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –∫–∞–Ω–∞–ª—ã\n"
            "‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏–∫–∞, —Ç–µ–Ω–¥–µ—Ä—ã, AI ‚Äî –¥–µ–ª–∞–µ–º –ø–æ–¥ –∫–ª—é—á, –ø–æ–¥ –∑–∞–¥–∞—á—É\n\n"
            "‚ö°Ô∏è –í—Å—ë –ø–æ–¥ –∫–ª—é—á. –ë–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤. –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è.",
            parse_mode="Markdown"
        )
    elif data == "portfolio":
        await query.edit_message_text(
            "üìÇ *–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–æ–≤:*\n\n"
            "‚Ä¢ @Parser_newbot ‚Äî –±–æ—Ç –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n"
            "‚Ä¢ @Capitalpay_newbot ‚Äî HighRisk –∞–Ω–∫–µ—Ç–∞ —Å –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–æ–π",
            parse_mode="Markdown"
        )
    elif data == "form":
        await query.edit_message_text("üì¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è* –∏ Telegram (–∏–ª–∏ –Ω–∏–∫):",
                                      parse_mode="Markdown",
                                      reply_markup=InlineKeyboardMarkup([
                                          [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel")]
                                      ]))
        return ASK_NAME
    elif data == "order":
        await query.edit_message_text("üí∞ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'.")
    elif data == "cancel":
        await start(update, context)
    else:
        await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# –ê–Ω–∫–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, *–∫–∞–∫–æ–π –±–æ—Ç –≤–∞–º –Ω—É–∂–µ–Ω*:",
                                    parse_mode="Markdown",
                                    reply_markup=InlineKeyboardMarkup([
                                        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel")]
                                    ]))
    return ASK_PROJECT

async def ask_project(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["project"] = update.message.text
    await update.message.reply_text("üí∏ –£–∫–∞–∂–∏—Ç–µ *–∂–µ–ª–∞–µ–º—ã–π –±—é–¥–∂–µ—Ç* –ø—Ä–æ–µ–∫—Ç–∞:",
                                    parse_mode="Markdown",
                                    reply_markup=InlineKeyboardMarkup([
                                        [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel")]
                                    ]))
    return ASK_BUDGET

async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = update.message.text
    user = update.message.from_user
    data = context.user_data
    date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
    tg_link = f"@{user.username}" if user.username else f"https://t.me/user?id={user.id}"

    try:
        sheet.append_row([
            data['name'],
            data['project'],
            data['budget'],
            tg_link,
            date
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    text = (
        f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üß† –ü—Ä–æ–µ–∫—Ç: {data['project']}\n"
        f"üí∏ –ë—é–¥–∂–µ—Ç: {data['budget']}\n"
        f"üîó Telegram: {tg_link}\n"
        f"üóìÔ∏è –î–∞—Ç–∞: {date}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode="Markdown")
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Telegram.")
    return ConversationHandler.END

# /help –∫–æ–º–∞–Ω–¥–∞
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()

    await update.message.reply_text(
        "‚ùì *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ñ–ë–ê–ù–ö–û–î:*\n\n"
        "üöÄ –ù–∞–∂–º–∏—Ç–µ `/start` –∏–ª–∏ `/menu`, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
        "üì¨ –í —Ä–∞–∑–¥–µ–ª–µ *¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª* –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É:\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ Telegram\n"
        "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –±–æ—Ç–∞\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç\n\n"
        "üìû –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ @zhbankov_alex",
        parse_mode="Markdown"
    )

    return ConversationHandler.END  # ‚Üê –í–æ—Ç —Å—é–¥–∞

# –û—Ç–º–µ–Ω–∞ –∞–Ω–∫–µ—Ç—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(set_menu(app.bot))

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(callback_handler))

    # –ê–Ω–∫–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å fallback –¥–ª—è /help
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(callback_handler, pattern="^form$")],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_PROJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_project)],
            ASK_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_budget)],
        },
        fallbacks=[
            CallbackQueryHandler(callback_handler, pattern="^cancel$"),
            CommandHandler("cancel", cancel),
            CommandHandler("help", help_command)
        ],
        allow_reentry=True,
        per_message=True  # üëà –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    )
    app.add_handler(conv_handler)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    app.run_polling()

if __name__ == "__main__":
    main()


